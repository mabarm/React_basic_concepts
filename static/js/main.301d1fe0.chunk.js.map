{"version":3,"sources":["components/HomePage.js","components/AboutPage.js","components/Header.js","components/App.js","index.js"],"names":["HomePage","className","AboutPage","React","Component","Header","href","App","window","location","pathname","render","document","getElementById"],"mappings":"uJAyBeA,MAdf,WAGE,OACE,sBAAKC,UAAU,YAAf,UAEE,kEACA,gG,4BCeSC,E,4JAtBb,WACE,OACE,qCACE,4CACA,6E,GALgBC,IAAMC,WCCfC,MARf,WACE,OACE,gCACE,mBAAGC,KAAK,IAAR,kBADF,MACyB,mBAAGA,KAAK,SAAR,uBCqBdC,MAhBf,WAOE,OAEE,cADA,CACA,OAAKN,UAAU,kBAAf,UACE,cAAC,EAAD,IANY,WADAO,OAAOC,SAASC,SACC,cAAC,EAAD,IACxB,cAAC,EAAD,QCeXC,iBAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.301d1fe0.chunk.js","sourcesContent":["//Will display our homepage\r\nimport React from \"react\"; // import npm package called react and store it in a variable called React\r\n// We can declare components using class or functions:\r\n//Let use first component as function\r\n\r\n/*React component should start with Capital: \r\n    1>Elements in JSX that start with a capital letter are assumed as React components\r\n    and Lowercase elemts are assumed to be native html.\r\n    2>React components are instantiated and JS functions and classes that create an instance traditionally start with a capital letter.\r\n*/\r\n\r\nfunction HomePage() {\r\n  //function comonents render whatever JSX we return\r\n  //So for this function let's return a div with a header and a paragraph inside.\r\n  return (\r\n    <div className=\"jumbotron\">\r\n      {/*Used classname instead of class(that's used in html, jumbotron is a class in bootstrap) */}\r\n      <h1>This is HomePage: Administration</h1>\r\n      <p>React, Flux, and React Router for ultra-responsive web apps</p>\r\n    </div>\r\n  );\r\n}\r\n//cretae-react-app uses ES modules and in that everything is private by default,Be default everything in each file is private\r\n//so component export is needed to make other files access this component\r\n\r\nexport default HomePage; //using default export as to let the import file name it as their wish when importing\r\n\r\n//Thus our first react component is complete\r\n","//will display our AboutPage\r\nimport React from \"react\";\r\n\r\n/*Let's use class component here\r\n//To make a class a react component we need to extend a base component called React.Component\r\n//Class components has just one require method called render,\r\n//In render we decalare our JSX,\r\n//For now let's just put a header here and return it at first\r\n*/\r\n\r\nclass AboutPage extends React.Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <h1>About Page</h1>\r\n        <p>Learning to use adjacent jsx elements</p>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n/* Adjacent elements must be wrapped in a enclosing tag\r\nJSX is compiled down to function calls and we can only have one top level function : \r\nWe can have only one top level elemnt in JSX.\r\n\r\n1. React.Fragment doesn't render anything on the screen its own \r\nbut helps in placing adjacent elemnts together:\r\n        Its shortcut is opening and closing empty tags.\r\n2.We could have used div instead of React.Fragment but not using a div thats not needed is not good.\r\n*/\r\n\r\n//Finally, export our AboutPage file at bottom\r\n\r\nexport default AboutPage;\r\n","import React from \"react\";\r\n\r\n//for a centralized header to choose link where to go created this file\r\nfunction Header() {\r\n  return (\r\n    <nav>\r\n      <a href=\"/\">Home</a> | <a href=\"/about\">About</a>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","//Will decide which page to render\r\n//Could have used React.router but will learn later\r\n//Right now, actually post back to server between pages happening\r\n//Downside : Posts happen back to the server and so it's slower and we lose client-side state.\r\n//Nice thing would be if a different component is called when linked is clicked which will implement later\r\n\r\nimport React from \"react\"; //imported React\r\nimport HomePage from \"./HomePage\"; //imported HomePage\r\nimport AboutPage from \"./AboutPage\"; //imported AboutPage\r\nimport Header from \"./Header\"; //imported HeaderPage\r\n\r\nfunction App() {\r\n  function getPage() {\r\n    //In js nested functions allowed\r\n    const route = window.location.pathname;\r\n    if (route === \"/about\") return <AboutPage />;\r\n    return <HomePage />;\r\n  }\r\n  return (\r\n    //container-fluid is a bootstrap classl\r\n    <div className=\"container-fluid\">\r\n      <Header />\r\n      {getPage()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n/*Our app's entrypoint is index.js as:\r\ncreate-react-app is configured to look at this file first \r\nand look into the imports within this(i.e index.js) file to see what other file makes our application\r\n*/\r\nimport React from \"react\";\r\n//To render our react app we are using react-dom as we are building a web app\r\nimport { render } from \"react-dom\"; //creates a const called render that references React-Dom's render function that will render our app\r\n\r\n//Using named import for react-dom and importing the render-function\r\n//named imports are a handy way to get a refernce to a function that's inside the element we're importing\r\nimport App from \"./components/App\";\r\n//import HomePage from \"./components/HomePage\"; //as we want to rnder our homepage so imported it\r\n//import AboutPage from \"./components/AboutPage\";\r\n/*render function accepts 2 argumets:\r\n 1st: The component that we want to render\r\n 2nd: the dom element where we want to place/mount our application\r\n\r\n For that go to index.html in our public folder and found a div that we can choose as our target and that div has an id of root\r\n Here, we will mount our application within this body tag\r\n*/\r\n//render(<HomePage />, document.getElementById(\"root\")); //to reference body's id div we used\r\n\r\n//and now we can see our homepage in web when run the app\r\n\r\n//in chrome/inspect/sources/static/mainchunk.js can see compiled source code that is served from memory via webpack\r\n//Little different than our source code as Babel transpiled it and webpack transformed it to run in browser\r\n\r\n//render(<AboutPage />, document.getElementById(\"root\"));\r\n\r\nrender(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}